<html>
<head>
<style> 
body {
  display: flex;
    flex-direction: column;
      align-items: stretch;
        min-height: 100vh;
          background: #232E34;
            color: #F5F5F5;
            }

header, footer {
  background: #2C3942;
    padding: 20px;
      text-align: center;
      }

.flex-container {
  display: flex;
    flex-wrap: wrap;
      justify-content: space-between;
      }

.flex-item {
  flex: 1;
    padding: 20px;
      box-sizing: border-box;
        background: #344955;
          margin: 10px;
            border-radius: 8px;
            }

h2 {
  color: #FFFFFF;
    margin-bottom: 20px;
    }

code {
  #font-family: "ms gothic";
  font-size: 15px;
    color: #C6C8CA;
      white-space: pre-wrap;
        word-break: break-word;
        }

/* Responsive design */
@media (max-width: 600px) {
  .flex-container {
      flex-direction: column;
        }
        }
</style>
  </head>
  <body>
	  <header>Login OK<BR></header>

	  <BR>
	  There are the all code samples to make session with zeroIDentify.<BR>
	  <BR>

  <div class="flex-container">

    <div class="flex-item">
          <h2>Client-side HTML Example</h2>
	  <pre><code>
&lt;div id="zeroIDentify"
     identify_type     = "log_in"
     get_nonce_func    = "getnonce"
     button_click_func = "createSession"
     server_publickey  = "<%= server_publickey %>" &gt;
&lt;/div&gt;
&lt;script src='https://zeroidentify.com/verify_v0.7.js'&gt;&lt;/script&gt;
&lt;script&gt;
    function getnonce( callback ){
        let xhr = new XMLHttpRequest();
        xhr.open('GET', './get_nonce');
        xhr.onreadystatechange = () => {
            if (xhr.readyState === 4 && xhr.status === 200) {
                callback(xhr.responseText)
            } else if (xhr.status >= 307 && xhr.readyState === 4) {
                alert('error');
            }
        }
        xhr.send(null);
    }
    function createSession( client_id, message, message_signed_by_client ){
        console.log("createSession")

        // Send the idToken to the server for verification
        const xhr = new XMLHttpRequest();
        xhr.open('POST', './create_session');
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.onreadystatechange = function() {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    console.log( "Verification successful" )
                    window.location.href = './seller.html';
                } else {
                    console.log('Create Session failed');
                }
            }
        };
        console.log( message_signed_by_client );
        xhr.send(JSON.stringify({ client_id, message, message_signed_by_client }));
    }
&lt;/script&gt;
	  </code></pre>
</div>
    <div class="flex-item">
          <h2>Server-side Javascript Example</h2>
	  <pre><code>
import express, { Response } from 'express';
import session from 'express-session';
import { Verifier } from './verifier';
import { server_publickey_key, domain_key, nonce_key } from './verify_sign';
import http  from 'http';
import https from 'https';
import fs from 'fs';
import path from 'path';

const this_domain = "192.168.15.6" // enter your domain

let port = 443

console.log( "port=" + port )

const app = express();
let verifier = new Verifier()

app.use(express.json());
app.use(session({
    secret: 'YOUR_SESSION_SECRET', // any random key is ok
    resave: false,
    saveUninitialized: false,
    cookie: {
        secure: true, // Use secure cookies (HTTPS)
        httpOnly: true, // Prevent client-side JavaScript access to cookies
    }
}));

app.post('/create_session', async (req: any, res: Response) => {
    console.log( "in /create_session" )
    console.log( "req.body=" )
    console.log( req.body )
    try {
        let client_id                = req.body.client_id
        let message                  = req.body.message
        let message_signed_by_client = req.body.message_signed_by_client

        let keyvalue = verifier.parse( message )
        //keyvalue[server_publickey_key]

        if ( verifier.check(keyvalue[nonce_key]) === false ){
            throw Error("verify error " + nonce_key + " is not exist")
        }
        if ( this_domain !== keyvalue[domain_key]){
            throw Error("verify error " + keyvalue[domain_key] + " is not " + this_domain) 
        }

        if ( await verifier.verify( client_id, message, message_signed_by_client ) === false ) {
            throw Error("verify error") 
        }

        req.session.regenerate( (err: any) =>{
            if ( err ){
                throw Error("regenerate error")
            }
            req.session.client_id = req.body.client_id
            res.sendStatus(200);
        })
    } catch (error) {
        console.error('Error verifying ID token:', error);
        res.sendStatus(401);
    }
});

app.get('/get_nonce', (req, res) => {
    console.log( "in /getnonce" )
    let randomkey = verifier.generateNonce()
    console.log(randomkey)
    res.send(randomkey)
});

app.get('/:filename', (req, res) => {
    const filename= req.params.filename;
    const filePath = path.join(__dirname+"/public", filename );
    console.log( filePath )

    // Set the appropriate content type and headers
    res.setHeader('Content-Type', 'text/html');

    // Send the file to the client
    res.sendFile(filePath);
});


const sslOptions = {
    key: fs.readFileSync('./public/ssl/key.pem'),
    cert: fs.readFileSync('./public/ssl/cert.pem'),
};


https.createServer(sslOptions, app).listen(port, () => {
    console.log('https server is running on port ' + port);
});

	  </code></pre>

    </div>
  </body>
  </html>
